1. git init <nama file / lokasi file> = untuk membuat repository
2. git add . = untuk menambahkan setiap perubahan pada source code yang dibuat (ini di pakai ketika filenya bertanda "U" / Undmodifide)
3. git commit -am "penjelasan aksi yang dilakukan" = untuk melakukan commit dan juga memberikan keterangan
4. git log = untuk melihat history 
5. git log --all --decorate --oneline --graph = untuk melihat history dalam grafik
6. git branch = untuk melihat sekarang pointer atau HEAD berada di branch mana
7. git branch <nama bebas untuk sebuah branch baru> = membuat branch baru
8. git checkout <nama branch> = untuk berpindah dari suatu bracnh
9. git merge <ama branch> = untuk menggabungkan branch (sebisa mungkin kita berada di branch main dan memasukkan branch lain ke dalamnya)
	- git merge <namaUserGitHubOrangLain>/main = untuk menggabungkan perubahan pada repo milik orang lain ke repo lokal milik kita
10. git branch -d <nama branch> = untuk menghapus branch yang sudah di commit
11. git branch -D <nama branch> = untuk menghapus branch apapun kondisinya
12. git status = untuk melihat status apakah masih zda yang belum di commit atau sudah selesai semuanya 
13. git checkout <7 inisial awal dari sebuah log atau history> = untuk menuju pada bagian atau history yang lampau (ini bisa dikombinasikan dengan "git branch <nama branch baru> lalu "git checkout <nama branch baru tersebut>" agar git yang  ada di 7 inisial pertama ini menjadi bracnh baru tersebut)
14. alias <nama bebas sebagai inisial>="git log --all --decorate --oneline --graph" (maka nama bebas tersebut akan menjadi inisial atau shortcut dari perintah git log --all....ini)
15. git clone <link github yang menjadi clone> = untuk membuat clone dan menghubungkan repo pada GitHub dengan Git lokal (kasus ini adalah di mana kita membuat repo di GitHub terlebih dahulu lalu diclone pada lokal)
16. git remote add <nama bebas bisanya "origin"> <link repo GitHub> = untuk menambahkan repo yang telah dibuat secara lokal terhubung ke server GitHub

{ kasus 1 :
ketika pada GitHub terdapat suatu perubahan yang sama pada repo lokal, maka yang perlu dilakukan adalah dengan memeriksa pada Git dengan cara :

17. git fetch = untuk memeriksa pada repo GitHub apakah terdapat perubahan
	-git fetch <nama user GitHub orang lain> = untuk memeriksa GitHub milik orang lain
18. git pull = untuk mengambil perubahan yang terjadi pada repo GitHub 

Setelah di pull, maka penambahan atau perubahan yang terjadi pada GitHub akan masuk ke dalam source code lokal lalu akan muncul Merged Conflik.
Dengan demikian, barulah kita perlu mengedit / resolve secara manual Merged Conflik tersebut lalu setelah itu di simpan (git add . / git commit) lalu di push (git push)
}

{ Kasus 2 :
Repo milik orang lain di GitHub --> kita ambil nge-fork ke GitHub sendiri -->masukkan juga ke lokal --> Up to date antara repo kita di lokal dan GitHub terhadap repo orang lain
	-- Untuk melihat lagi langka-langkahnya ada di video ke 10
}

19. code . = adalah cara untuk membuka code editor di dalam folder yang sedang di jalankan
20. git checkout -b <nama branch> = ini untuk menjalankan dua perintah sekaligus yaitu pindah ke branch baru dan sekaligus buat branch baru tersebut jika belum ada
21. git pull <nama GitHub> = ini adalah untuk melakukan pull request pada GitHub seseorang
22. git push origin <nama branch cabang> = ini untuk mengupdate repo di GitHub milik kita sendiri (origin adalah nama default pada GitHub milik sendiri)
23. git push origin --delet <namaBranchCabangYangInginDihapus> = untuk menghapus branch cabang pada GitHub
24. .gitignore = untuk membuat file yang berisikan daftar file-file apa saja yang sebaiknya tidak dimasukkan ke dalam GitHub (untuk lebih jelasnya atau ada triknya bisa dilihat pada video ke 12)

